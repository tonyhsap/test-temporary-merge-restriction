name: Update Branch Protection

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Enable, disable, or get restrict updates"
        required: true
        default: "get"
        type: choice
        options:
          - enable
          - disable
          - get

jobs:
  update-branch-protection:
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.ADMIN_PAT }}" | gh auth login --with-token

      - name: Install Python and tzdata
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip tzdata
          pip install pytz

      - name: Determine Local Time
        id: time-check
        run: |
          python3 -c "
          from datetime import datetime
          import pytz

          # Define the target timezone
          tz = pytz.timezone('Europe/Berlin')

          # Get the current time in the target timezone
          local_time = datetime.now(tz)
          utc_time = datetime.utcnow()

          # Desired times for action
          add_update_time = local_time.replace(hour=11, minute=30, second=0, microsecond=0)
          remove_update_time = local_time.replace(hour=13, minute=15, second=0, microsecond=0)

          # Print results for debugging
          print(f'Current Local Time: {local_time}')
          print(f'Current UTC Time: {utc_time}')

          # Pass results to the next steps
          if local_time.hour == 11 and local_time.minute == 30:
              print('Action: Add update type')
              print('::set-output name=action::add')
          elif local_time.hour == 13 and local_time.minute == 15:
              print('Action: Remove update type')
              print('::set-output name=action::remove')
          else:
              print('Not the correct time. No action required.')
              print('::set-output name=action::none')
                    "
      - name: Get Default Branch
        run: |
          echo "DEFAULT_BRANCH=$(gh api repos/${{ github.repository }} --jq '.default_branch')" >> $GITHUB_ENV
          echo "Default branch is: $DEFAULT_BRANCH"
      - name: Fetch Ruleset ID for Main Branch
        id: fetch-ruleset
        run: |
          echo "Fetching ruleset for branch $DEFAULT_BRANCH"
          RULESET_RESPONSE=$(gh api repos/${{ github.repository }}/rules/branches/$DEFAULT_BRANCH --jq '.')
          echo "$RULESET_RESPONSE" > ruleset.json
          RULESET_ID=$(echo "$RULESET_RESPONSE" | jq -r '.[0].ruleset_id')
          echo "Ruleset ID: $RULESET_ID"
          echo "ruleset_id=$RULESET_ID" >> $GITHUB_ENV

      - name: Modify Ruleset to Remove Update
        run: |
          echo "Fetching full ruleset details for ID ${{ env.ruleset_id }}..."
          gh api repos/${{ github.repository }}/rulesets/${{ env.ruleset_id }} --jq '.' > original_ruleset.json
          echo "Original ruleset:"
          cat original_ruleset.json

          if [[ "${{ github.event.inputs.action }}" == "disable" ]]; then
            echo "Remove 'type: update'..."
            jq 'del(.rules[] | select(.type == "update"))' original_ruleset.json > updated_ruleset.json
            echo "Updated ruleset:"
            cat updated_ruleset.json
          elif [[ "${{ github.event.inputs.action }}" == "enable" ]]; then
            echo "Adding 'type: update'..."
            jq '.rules += [{"type": "update"}]' original_ruleset.json > updated_ruleset.json
            echo "Updated ruleset:"
            cat updated_ruleset.json
          fi

      - name: Update Ruleset via API
        if: ${{ github.event.inputs.action == 'enable' || github.event.inputs.action == 'disable' }}
        run: |
          echo "Sending updated ruleset back to GitHub..."
          gh api repos/${{ github.repository }}/rulesets/${{ env.ruleset_id }} --method PUT --input updated_ruleset.json

      - name: Verify Updated Ruleset
        if: ${{ github.event.inputs.action == 'enable' || github.event.inputs.action == 'disable' }}
        run: |
          echo "Verifying updated ruleset for ID ${{ env.ruleset_id }}..."
          gh api repos/${{ github.repository }}/rulesets/${{ env.ruleset_id }} --jq '.rules'
