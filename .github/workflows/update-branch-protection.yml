name: Update Branch Ruleset Update Type (Block PR merges at certain times)

on:
  schedule:
    # Automatically execute at specific times
    - cron: "30 9 * * 1-4" # Summer time
    - cron: "30 10 * * 1-4" # Winter time
    - cron: "15 11 * * 1-4" # Summer time (removal)
    - cron: "15 12 * * 1-4" # Winter time (removal)
  workflow_dispatch:
    inputs:
      action:
        description: "Add, remove, or get restrict updates"
        required: true
        default: "get"
        type: choice
        options:
          - add
          - remove
          - get
          - auto

jobs:
  update-branch-protection:
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.ADMIN_PAT }}" | gh auth login --with-token

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Determine Action
        id: action-determination
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.action }}" != "auto" ]]; then
            echo "Manual trigger detected. Action is: ${{ github.event.inputs.action }}"
            ACTION=${{ github.event.inputs.action }}
          else
            echo "Automatic schedule detected. Determining action based on time..."
            # Get current time in CET
            CURRENT_TIME=$(TZ=Europe/Berlin date +%H:%M)
            echo "Current CET time: $CURRENT_TIME"

            # Define start and end times
            START_TIME="11:30"
            END_TIME="13:15"

            # Determine if the current time is within the range
            if [[ "$CURRENT_TIME" > "$START_TIME" && "$CURRENT_TIME" < "$END_TIME" ]]; then
              echo "Time is within range. Setting action to 'add'."
              ACTION="add"
            else
              echo "Time is outside range. Setting action to 'remove'."
              ACTION="remove"
            fi
          fi
          echo "Selected Action: $ACTION"
          echo "ACTION=$ACTION" >> $GITHUB_ENV

      - name: Get Default Branch
        run: |
          DEFAULT_BRANCH=$(gh api repos/${{ github.repository }} --jq '.default_branch')
          echo "Default branch: $DEFAULT_BRANCH"
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

      - name: Fetch Ruleset ID for Default Branch
        id: fetch-ruleset
        run: |
          echo "Fetching ruleset for branch: $DEFAULT_BRANCH"
          RULESET_RESPONSE=$(gh api repos/${{ github.repository }}/rules/branches/$DEFAULT_BRANCH --jq '.')
          echo "$RULESET_RESPONSE" > ruleset.json
          RULESET_ID=$(echo "$RULESET_RESPONSE" | jq -r '.[0].ruleset_id')
          echo "Ruleset ID: $RULESET_ID"
          echo "ruleset_id=$RULESET_ID" >> $GITHUB_ENV

      - name: Modify Ruleset Update Type
        run: |
          echo "Fetching full ruleset details for ID $ruleset_id..."
          gh api repos/${{ github.repository }}/rulesets/$ruleset_id --jq '.' > original_ruleset.json
          echo "Original ruleset:"
          cat original_ruleset.json | jq '.'

          if [[ "$ACTION" == "remove" ]]; then
            echo "Removing 'type: update'..."
            jq 'del(.rules[] | select(.type == "update"))' original_ruleset.json > updated_ruleset.json
          elif [[ "$ACTION" == "add" ]]; then
            echo "Checking if 'type: update' already exists..."
            EXISTS=$(jq '.rules[] | select(.type == "update")' original_ruleset.json)
            if [[ -n "$EXISTS" ]]; then
              echo "'type: update' already exists. No changes made."
            else
              echo "Adding 'type: update'..."
              jq '.rules += [{"type": "update"}]' original_ruleset.json > updated_ruleset.json
            fi
          fi

          if [[ -f updated_ruleset.json ]]; then
            echo "Updated ruleset:"
            cat updated_ruleset.json
            echo "Sending updated ruleset back to GitHub..."
            gh api repos/${{ github.repository }}/rulesets/$ruleset_id --method PUT --input updated_ruleset.json
          fi
