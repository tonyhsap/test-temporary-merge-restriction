name: Update Branch Ruleset Update Type (Block PR merges at certain times)

on:
  schedule:
    # Automatically execute at specific times
    - cron: "30 9 * * 1-5" # Summer time
    - cron: "30 10 * * 1-5" # Winter time
    - cron: "15 11 * * 1-5" # Summer time (removal)
    - cron: "15 12 * * 1-5" # Winter time (removal)
  workflow_dispatch:
    inputs:
      action:
        description: "Add, remove, or get restrict updates"
        required: true
        default: "get"
        type: choice
        options:
          - add
          - remove
          - get

jobs:
  update-branch-protection:
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.ADMIN_PAT }}" | gh auth login --with-token

      - name: Install Python and tzdata
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip tzdata
          pip install pytz

      - name: Determine Action
        id: action-determination
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual trigger detected. Action is: ${{ github.event.inputs.action }}"
            echo "ACTION=${{ github.event.inputs.action }}" >> $GITHUB_ENV
          else
            echo "Automatic schedule detected. Determining action based on time..."
            python3 .github/workflows/determine_action.py >> $GITHUB_ENV
          fi

      - name: Get Default Branch
        run: |
          echo "DEFAULT_BRANCH=$(gh api repos/${{ github.repository }} --jq '.default_branch')" >> $GITHUB_ENV

      - name: Fetch Ruleset ID for Main Branch
        id: fetch-ruleset
        run: |
          echo "Fetching ruleset for branch: $DEFAULT_BRANCH"
          RULESET_RESPONSE=$(gh api repos/${{ github.repository }}/rules/branches/$DEFAULT_BRANCH --jq '.')
          echo "$RULESET_RESPONSE" > ruleset.json
          RULESET_ID=$(echo "$RULESET_RESPONSE" | jq -r '.[0].ruleset_id')
          echo "Ruleset ID: $RULESET_ID"
          echo "ruleset_id=$RULESET_ID" >> $GITHUB_ENV

      - name: Modify Ruleset Update Type
        if: ${{ env.ACTION != 'none' }}
        run: |
          echo "Fetching full ruleset details for ID $ruleset_id..."
          gh api repos/${{ github.repository }}/rulesets/$ruleset_id --jq '.' > original_ruleset.json
          echo "Original ruleset:"
          cat original_ruleset.json | jq '.'

          echo "Selected action: $ACTION"

          if [[ "$ACTION" == "remove" ]]; then
            echo "Remove 'type: update'..."
            jq 'del(.rules[] | select(.type == "update"))' original_ruleset.json > updated_ruleset.json
            echo "Updated ruleset:"
            cat updated_ruleset.json
          elif [[ "$ACTION" == "add" ]]; then
            echo "Adding 'type: update'..."
            jq '.rules += [{"type": "update"}]' original_ruleset.json > updated_ruleset.json
            echo "Updated ruleset:"
            cat updated_ruleset.json
          fi

      - name: Update Ruleset via API
        if: ${{ env.ACTION == 'add' || env.ACTION == 'remove' }}
        run: |
          echo "Sending updated ruleset back to GitHub..."
          gh api repos/${{ github.repository }}/rulesets/$ruleset_id --method PUT --input updated_ruleset.json

      - name: Verify Updated Ruleset
        if: ${{ env.ACTION == 'add' || env.ACTION == 'remove' }}
        run: |
          echo "Verifying updated ruleset for ID $ruleset_id..."
          gh api repos/${{ github.repository }}/rulesets/$ruleset_id --jq '.rules'
